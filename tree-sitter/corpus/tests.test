====
func
====

func someFunc() {}

---

(program
    (func_decl
        (ident)
    )
)

========
pub func
========

pub func someFunc() {}

---

(program
    (func_decl
        (pub)
        (ident)
    )
)

===============
func with param
===============

pub func someFunc(field: i32) {}

---

(program
    (func_decl
        (pub)
        (ident)
        (params_decl
            (param_decl
                (ident)
                (type)
            )
        )
    )
)

================
func with params
================

pub func someFunc(field: i32, other: i32) {}

---

(program
    (func_decl
        (pub)
        (ident)
        (params_decl
            (param_decl
                (ident)
                (type)
            )
            (param_decl
                (ident)
                (type)
            )
        )
    )
)

===============
var declaration
===============

var m = 5

---

(program
    (var_decl
        (ident)
        (int_literal)
    )
)

==================
var decl with type
==================

var m: i32 = 5

---

(program
    (var_decl
        (ident)
        (type)
        (int_literal)
    )
)

==========================
func with var decl in body
==========================

func someFunc() { var m: i32 = 5 }

---

(program
    (func_decl
        (ident)
        (body
            (var_decl
                (ident)
                (type)
                (int_literal)
            )
        )
    )
)

=====================
func with return type
=====================

func someFunc() -> i32 {}

---

(program 
    (func_decl
        (ident)
        (type)
    )
)

========================
func with return literal
========================

func five() -> i32 { 
    return 5 
}

---

(program
    (func_decl
        (ident)
        (type)
        (body 
            (return (int_literal))
        )
    )
)

====================
func with var return
====================

func someFunc() -> i32 { var m: i32 = 5 return m }

---

(program
    (func_decl
        (ident)
        (type)
        (body
            (var_decl
                (ident)
                (type)
                (int_literal)
            )
            (return
                (ident)
            )
        )
    )
)

======================
func with empty return
======================

func someFunc() { return }

---

(program
    (func_decl
        (ident)
        (body
            (return)
        )
    )
)

========================
func with literal return
========================

func someFunc() -> i32 { return 1 }

---

(program
    (func_decl
        (ident)
        (type)
        (body
            (return (int_literal))
        )
    )
)

===============
unary precedence
===============

func s() { return - a * b }

---

(program
    (func_decl
        (ident)
        (body
            (return
                (binary_expr
                    (unary_expr 
                        (ident)
                    )
                    (ident)
                )
            )
        )
    )
)

=================
binary precedence
=================

func s() { return a * b * d }

---

(program
    (func_decl 
        (ident)
        (body
            (return
                 (binary_expr
                    (binary_expr
                        (ident)
                        (ident)
                    )
                    (ident)
                )      
            )
        )
    )
)

=======================
mixed binary precedence
=======================

func s() {
    return a + b * c
}

---

(program
    (func_decl
        (ident)
        (body
            (return
                (binary_expr
                    (ident)
                    (binary_expr
                        (ident)
                        (ident)
                    )
                )
            )
        )
    )
)

=========================
binary precedence level 2
=========================

func s() { return a * b / 1 }

---

(program
    (func_decl
        (ident)
        (body
            (return
                (binary_expr
                    (binary_expr
                        (ident)
                        (ident)
                    )
                    (int_literal)
                )
            )
        )
    )
)

======================
expression with parens
======================

func s() { return (a - 5) * 6 }

---

(program
    (func_decl
        (ident)
        (body
            (return
                (binary_expr
                    (binary_expr
                        (ident)
                        (int_literal)
                    )
                    (int_literal)
                )
            )
        )
    )
)

===
i64
===

func int64() -> i64 { var a: i64 = 5 return a }

---

(program
    (func_decl
        (ident)
        (type)
        (body
            (var_decl
                (ident)
                (type)
                (int_literal)
            )
            (return
                (ident)
            )
        )
    )
)

===
f32
===

func f32() -> f32 { var a: f32 = 5.6 return a }

---

(program
    (func_decl
        (ident)
        (type)
        (body
            (var_decl
                (ident)
                (type)
                (float_literal)
            )
            (return (ident))
        )
    )
)
